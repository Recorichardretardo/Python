* Object Orented Programming:
=============================

* Classes and Objects:
=======================

* Python is an object oriented programming language.

* Almost everything in Python is an object, with its properties and methods.

* A Class is like an object constructor, or a "blueprint" for creating objects.

* Create a Class:
=================

* To create a class, use the keyword class:

Eg:

class MyClass:
  x = 5

* Create Object:
================

* The class named MyClass to create objects:

Eg:

Create an object named p1, and print the value of x:

p1 = MyClass()
print(p1.x)

* The __init__() Function:
===========================

*  __init__() is python built-in function

* All classes have a function called __init__(), which is always executed when the class is being initiated.

* Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created.



Eg:

class Student:
    def __init__(self):
        self.name = "Rolf"
        self.grades = (89, 90, 93, 78, 90)

    def average(self):
        return sum(self.grades) / len(self.grades)


student = Student()
print(student.name)
print(student.average())


* The self Parameter:
======================

* The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
* It does not have to be named self ,it could be any name , but it has to be the first parameter of any function in the class.


Eg:

class Student:
  def __init__(type, name):
    type.name = name

  def namefunc(abc):
    print("student name is " + abc.name)

student = Student("Rolf")
student.namefunc()

* Parameters in __init__:
==========================

Eg:

class Student:
    def __init__(self, name, grades):
        self.name = name
        self.grades = grades

    def average(self):
        return sum(self.grades) / len(self.grades)


student = Student("Bob", (36, 67, 90, 100, 100))
print(student.average())

*  *args in __init__:
======================

Eg:

class Student:
    def __init__(self, name, *grades):
        self.name = name
        self.grades = grades

    def average(self):
        return sum(self.grades) / len(self.grades)


student = Student("Bob", 36, 67, 90, 100, 100)
print(student.average())




* class with pass Statement:
=============================

* class definitions cannot be empty, a class definition with no content ,put in the pass statement to avoid getting an error.

Eg:

class Student:
  pass




