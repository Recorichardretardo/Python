* Python Data Structures:  Lists, Tuples, Sets, Dictionaries
=============================================================

* A data structure as a way of organizing and storing data such that we can access and modify it efficiently.

* List:
=======

* A data structure that stores an ordered collection of items in Python is called a list. 
In other words, a list holds a sequence of items.

* The general syntax of a list is:

some_list = [item 1, item 2, item 3,….., item n]


* Any list can have any number of elements and of different data types. Moreover, a list can have another list as an element. Such a list is known as a nested list. 
* After creating a list in Python, it is possible to search, add, and remove items from the list.
* A list qualifies for being labeled as a mutable data type because it can be altered by adding or removing elements.

* Following are the various methods supported by lists in Python:
=================================================================

* append () – Adds an element to the end of the list
* clear () – Removes all elements from the list
* copy () – Returns a shallow copy of the list
* count () – Returns the total number of items passed as an argument
* extend () – Adds all elements of a list to some other list
* index () – Returns the index of an element (Note: If the same element appears multiple times in the list then the index of the very first match is returned)
* insert () – Inserts an element to the list at the defined index
* pop () – Eliminates and returns an element from the list
* remove () – Eliminates an element from the list
* reverse () – Reverses the order of all elements of the list
* sort () – Sort all elements of a list in the ascending order

* Tuple :
=========

* Similar to a list, the tuple is a built-in data structure in Python.
* However, it doesn’t support the same level of extensive functionality. 
* The most important difference between a list and a tuple is mutability.
* Unlike lists, tuples are immutable i.e. they can’t be modified.
* A tuple in the Python programming language is defined using parentheses with each item separated by commas.
* Though adding parentheses to the tuple is optional, its use is recommended to clearly define the end and start of the tuple.

* The general syntax of a tuple is:

some_tuple = (item 1, item 2, item 3,….., item n)

* In order to define an empty tuple, an empty pair of parentheses is used. For example,

empty_tuple = ()

* Defining a tuple with a single item: 
--------------------------------------

* Need to specify the same using a comma following the only item.
* This is done in order to allow Python to differentiate between a tuple and a pair of parentheses surrounding the object in some expression.

* So, a tuple, say singleton_tuple, with a single item, say item 1, is defined as: 

singleton_tuple = (item 1, ) or singleton_tuple = item 1, 

* Similar to string indices, tuple indices start at 0. Like strings, tuples can be concatenated and sliced.

Methods available for tuples are:
----------------------------------

* cmp () – Compares elements of two tuples
* len () – Gives out the total length of some tuple
* max () – Returns the biggest value from a tuple
* min () – Returns the smallest value from a tuple
* tuple () – Converts some list into a tuple

* Dictionary:
=============

* Another type of built-in data structure in Python is the dictionary.
* It stores data in the form of key-value pairs.
* The keys defined for a dictionary need to be unique.
* Though values in a dictionary can be mutable or immutable objects, only immutable objects are allowed for keys.

*A dictionary in Python is defined using key-value pairs, separated by commas, enclosed within curly braces.
* The key and value are separated using a colon.

* The general syntax of a dictionary is:

some_dictionary ={key 1 : value 1, key 2 : value 2, key 3 : value 3,…., key n : value n}

* The key-value pairs in a dictionary don’t follow any specific order.
* Hence, Need to sort them manually for maintaining some kind of order.
* In order to access any key-value pair, the key needs to be specified using the indexing operator.
* The "del" statement is used for deleting one or many key-value pairs from a dictionary. 
* The "in" operator is there for checking whether a key-value pair exists in the dictionary or not.

* Set:
======

* Simply, a set is an unordered collection of simple objects in Python. 
* In addition to being iterable and mutable, a set has no duplicate elements.
* Compared to a list, a set is advantageous by virtue of having a highly optimized method for checking whether some element is contained in the set or not. 

* The general syntax of a set is:

some_set = {“item 1”, “item 2”, “item 3”,….., “item n”}

Methods supported by sets are:
-------------------------------

* add () – Adds an item to the set (Note: As sets don’t have repeating values, the item that is to be added to a set must not be already a member of the set.)
* clear () – Removes all items of the set
* difference () – Returns a set with all elements of the invoking set but not of the second set
* intersect () – Returns an intersection of two sets
* union () – Returns a union of two sets

* Note : Adds an item to the set add () and not append(). That's because append means "add at the end", but sets don't have an "end" since they don't have order.

