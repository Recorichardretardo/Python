* loops in python:
===================

* Looping statements in python are used to execute a block of statements or code repeatedly for several times as specified by the user.

* There are two types of loops in Python, for and while.

* while Loop:
=============

* "while" loop can execute a set of statements as long as a condition is true.

Eg:

* Print i as long as i is less than 6:

i = 1
while i < 6:
  print(i)
  i += 1


 * while with  break Statement :
 ===============================
 * The break statement we can stop the loop even if the while condition is true:

 Eg:

 * Exit the loop when i is 3:

 i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

* while with continue Statement:
================================

* The continue statement can stop the current iteration, and continue with the next:

Eg:

* Continue to the next iteration if i is 3:

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

* while with else Statement:
============================

* The else statement can run a block of code once when the condition no longer is true:

Eg:

* Print a message once the condition is false:

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")


* For Loop:
===========

* For loops are used for sequential traversal.

Eg:

friends = ["Rolf","Bob","Jen"]
for friend in friends:
  print(f"{friend} is my friend")

* Looping Through a String:
============================

* Even strings are iterable objects, they contain a sequence of characters:

Eg:

for x in "Rolf":
  print(x)

 * for with break Statement: 
 ===========================

Eg:

friends = ["Rolf","Bob","Jen"]
for friend in friends:
  print(f"{friend} is my friend")
  if friend == "Bob":
    break

* for with continue Statement:
==============================

friends = ["Rolf","Bob","Jen"]
for friend in friends:
  if friend == "Bob":
    continue
  print(f"{friend} is my friend")

* Else in For Loop:
====================

* The else keyword in a for loop specifies a block of code to be executed when the loop is finished:

  for x in range(6):
  print(x)
else:
  print("Finally finished!")

  * Nested Loops:
  ================

* nested loop is a loop inside a loop.

* The "inner loop" will be executed one time for each iteration of the "outer loop":

Eg:

adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)

* The pass Statement:
=====================
* for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.

Eg:

for x in [0, 1, 2]:
  pass

