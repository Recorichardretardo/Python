* Dictionary Comprehension:
============================

* Dictionary comprehension is a method for transforming one dictionary into another dictionary.
* During this transformation, items within the original dictionary can be conditionally included in the new dictionary and each item can be transformed as needed.


Eg:

dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
# Double each value in the dictionary

double_dict1 = {k:v*2 for (k,v) in dict1.items()}
print(double_dict1)

output: {'a': 2, 'b': 4, 'c': 6, 'd': 8, 'e': 10}

* 8
73
73
Sejal Jaiswal
December 12th, 2017
PYTHON
Python Dictionary Comprehension Tutorial
Learn all about Python dictionary comprehension: how you can use it to create dictionaries, to replace (nested) for loops or lambda functions with map(), filter() and reduce(), ...!

Dictionaries (or dict in Python) are a way of storing elements just like you would in a Python list. But, rather than accessing elements using its index, you assign a fixed key to it and access the element using the key. What you now deal with is a "key-value" pair, which is sometimes a more appropriate data structure for many problem instead of a simple list. You will often have to deal with dictionaries when doing data science, which makes dictionary comprehension a skill that you will want to master.

In this tutorial:

First you'll see what a Python dictionary really is and how you can use it effectively.
Next, you'll learn about Python dictionary comprehensions: you will see what it is, why it is important and how it can serve as an alternative to for loops and lambda functions.
You will learn how to add conditionals into dictionary comprehensions: you will work with if conditions, multiple if conditions and also if-else statements.
Lastly, you will see what nested dictionary comprehension is, how you can use it and how you can potentially rewrite it with for loops.
Let's get started...


Python Dictionary
A dictionary in Python is a collection of items accessed by a specific key rather than by index. What does this mean?

Imagine a dictionary in the real world... when you need to look up the meaning of a word, you try to find the meaning using the word itself and not the possible index of the word. Python dictionaries work with the same concept, the word whose meaning you are looking for is the key and the meaning of the word is the value, you do not need to know the index of the word in a dictionary to find its meaning.

Note: The keys in a dictionary have to be hashable.

Hashing is the process of running an item through a specific kind of function. This function is called a "hash function". This hash function returns a unique output for a unique input value. Integers, floating point numbers, strings, tuples, and frozensets are hashable. While lists, dictionaries, and sets other than frozensets are not. Hashing is a somewhat complex topic and this is only the basic concept behind hashing.

You can initialize a dictionary in Python this way:

a = {'apple': 'fruit', 'beetroot': 'vegetable', 'cake': 'dessert'}
a['doughnut'] = 'snack'
print(a['apple'])
fruit
print(a[0])
---------------------------------------------------------------------------

KeyError                                  Traceback (most recent call last)

<ipython-input-9-00d4a978143a> in <module>()
----> 1 print(a[0])


KeyError: 0
Note that the line of code above gives you an error message because there doesn't exist a key '0'.

The items in a dictionary can have any data type. Check out some more examples of a dictionary to get a hang of it:

a = {'one': 1, 'two': 'to', 'three': 3.0, 'four': [4,4.0]}
print(a)
{'four': [4, 4.0], 'two': 'to', 'three': 3.0, 'one': 1}
# Update a dictionary
a['one'] = 1.0 
print(a)
{'four': [4, 4.0], 'two': 'to', 'three': 3.0, 'one': 1.0}
# Delete a single element
del a['one'] 
print(a)
{'four': [4, 4.0], 'two': 'to', 'three': 3.0}
# Delete all elements in the dictionary
a.clear()
print(a)
{}
# Delete the dictionary
del a 
print(a)
---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

<ipython-input-12-701c9d6596da> in <module>()
      1 del a #Deletes the dictionary
----> 2 print(a)


NameError: name 'a' is not defined
Important to remember is that a key has to be unique in a dictionary, no duplicates are allowed. However, in case of duplicate keys rather than giving an error, Python will take the last instance of the key to be valid and simply ignore the first key-value pair. See it for yourself:

sweet_dict = {'a1': 'cake', 'a2':'cookie', 'a1': 'icecream'}
print(sweet_dict['a1'])
icecream
If you want to know more about dictionaries in Python, check out this tutorial.


Python Dictionary Comprehension
Dictionary comprehension is a method for transforming one dictionary into another dictionary. During this transformation, items within the original dictionary can be conditionally included in the new dictionary and each item can be transformed as needed.

A good list comprehension can make your code more expressive and thus, easier to read. The key with creating comprehensions is to not let them get so complex that your head spins when you try to decipher what they are actually doing. Keeping the idea of "easy to read" alive.

The way to do dictionary comprehension in Python is to be able to access the key objects and the value objects of a dictionary.

How can this be done?

Python has you covered! You can simply use the built-in methods for the same:

dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
# Put all keys of `dict1` in a list and returns the list
dict1.keys()
dict_keys(['c', 'd', 'a', 'b'])
# Put all values saved in `dict1` in a list and returns the list
dict1.values()
dict_values([3, 4, 1, 2])
So, now that you know how to access all the keys and their values in a dictionary. You can also access each key-value pair within a dictionary using the items() method:

dict1.items()
dict_items([('c', 3), ('d', 4), ('a', 1), ('b', 2)])
This is the general template you can follow for dictionary comprehension in Python:

dict_variable = {key:value for (key,value) in dictonary.items()}
This can serve as the basic and the most simple template. This can get more and more complex as you add conditionalities to it.

Let's start off with a simple dictionary comprehension:

dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
# Double each value in the dictionary
double_dict1 = {k:v*2 for (k,v) in dict1.items()}
print(double_dict1)

output: {'a': 2, 'b': 4, 'c': 6, 'd': 8, 'e': 10}

* In the comprehension code above, created  new dictionary double_dict1 from a dictionary dict1 by simply doubling each value in it.


Eg:

dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}

dict1_keys = {k*2:v for (k,v) in dict1.items()}
print(dict1_keys)

output: {'aa': 1, 'bb': 2, 'cc': 3, 'dd': 4, 'ee': 5}


* Dictionary comprehension is a powerful concept and can be used to substitute for loops and lambda functions.
* However, not all for loop can be written as a dictionary comprehension but all dictionary comprehension can be written with a for loop.

Eg:

* create a new dictionary where the key is a number divisible by 2 in a range of 0-10 and it's value is the square of the number.

numbers = range(10)
new_dict_for = {}

# Add values to `new_dict` using for loop
for n in numbers:
    if n%2==0:
        new_dict_for[n] = n**2

print(new_dict_for)

output: {0: 0, 2: 4, 4: 16, 6: 36, 8: 64}

# Use dictionary comprehension
numbers = range(10)
new_dict_comp = {n:n**2 for n in numbers if n%2 == 0}

print(new_dict_comp)

output: {0: 0, 2: 4, 4: 16, 6: 36, 8: 64}


* Alternative to lambda functions:
===================================
* Lambda functions are a way of creating small anonymous functions. 
* They are functions without a name.
* These functions are throw-away functions, which are only needed where they have been created. 
* Lambda functions are mainly used in combination with the functions filter(), map() and reduce().

Eg:

 lambda function along with the map() function:

 # Initialize `fahrenheit` dictionary 
fahrenheit = {'t1':-30, 't2':-20, 't3':-10, 't4':0}

#Get the corresponding `celsius` values
celsius = list(map(lambda x: (float(5)/9)*(x-32), fahrenheit.values()))

#Create the `celsius` dictionary
celsius_dict = dict(zip(fahrenheit.keys(), celsius))

print(celsius_dict)

output:{'t1': -34.44444444444444, 't2': -28.88888888888889, 't3': -23.333333333333336, 't4': -17.77777777777778}

* the same problem using dictionary comprehension:

# Initialize the `fahrenheit` dictionary 
fahrenheit = {'t1': -30,'t2': -20,'t3': -10,'t4': 0}

# Get the corresponding `celsius` values and create the new dictionary
celsius = {k:(float(5)/9)*(v-32) for (k,v) in fahrenheit.items()}

print(celsius)


Eg:

users = [
    (0, "Bob", "password"),
    (1, "Rolf", "bob123"),
    (2, "Jose", "longp4assword"),
    (3, "username", "1234"),
]

username_mapping = {user[1]: user for user in users}
userid_mapping = {user[0]: user for user in users}

print(username_mapping)

print(username_mapping["Bob"])  # (0, "Bob", "password")
