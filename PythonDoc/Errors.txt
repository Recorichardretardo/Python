* Errors and Exceptions:
=========================

* Syntax Errors:
=================

* Syntax errors, also known as parsing errors.

Eg:

while True print('Hello world')
  File "<stdin>", line 1
    while True print('Hello world')
                   ^
SyntaxError: invalid syntax

* The parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. 
* The error is caused by (or at least detected at) the token preceding the arrow: in the example, the error is detected at the function print(), since a colon (':') is missing before it. File name and line number are printed.

* Exceptions:
==============

* Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it.
* Errors detected during execution are called exceptions and are not unconditionally fatal.

Eg:

>>> 10 * (1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 4 + spam*3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly

* The last line of the error message indicates what happened.
* Exceptions come in different types, and the type is printed as part of the message: the types in the example are ZeroDivisionError, NameError and TypeError.
* The string printed as the exception type is the name of the built-in exception that occurred.
* This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention).
* Standard exception names are built-in identifiers (not reserved keywords).


* Handling Exceptions:
=======================

* It is possible to write programs that handle selected exceptions. 
* When an error occurs, or exception, Python will normally stop and generate an error message.

* These exceptions can be handled using the try statement:

Eg:

 while True:
    try:
        x = int(input("Please enter a number: "))
        break
    except ValueError:
        print("Oops!  That was no valid number.  Try again...")


* The try statement works as follows.

* First, the try clause (the statement(s) between the try and except keywords) is executed.

* If no exception occurs, the except clause is skipped and execution of the try statement is finished.

* If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, the except clause is executed, and then execution continues after the try statement.

* If an exception occurs which does not match the exception named in the except clause, it is passed on to outer try statements; if no handler is found, it is an unhandled exception and execution stops with a message.

* A try statement may have more than one except clause, to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same try statement. An except clause may name multiple exceptions as a parenthesized tuple.

Eg:

  except (RuntimeError, TypeError, NameError):
         pass

* Raising Exceptions:
======================

* The raise statement allows the programmer to force a specified exception to occur.

Eg:

>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: HiThere

Eg:

try:
    raise NameError('HiThere')
except NameError:
    print('An exception flew by!')
    raise

An exception flew by!
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: HiThere

* User-defined Exceptions:
===========================

* Programs may name their own exceptions by creating a new exception class.
* Exceptions should typically be derived from the Exception class, either directly or indirectly.

* Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.
* When creating a module that can raise several distinct errors, a common practice is to create a base class for exceptions defined by that module, and subclass that to create specific exception classes for different error conditions.


Eg:

class Error(Exception):
    """Base class for exceptions in this module."""
    pass

class InputError(Error):
    """Exception raised for errors in the input.

    Attributes:
        expression -- input expression in which the error occurred
        message -- explanation of the error
    """

    def __init__(self, expression, message):
        self.expression = expression
        self.message = message

class TransitionError(Error):
    """Raised when an operation attempts a state transition that's not
    allowed.

    Attributes:
        previous -- state at beginning of transition
        next -- attempted new state
        message -- explanation of why the specific transition is not allowed
    """

    def __init__(self, previous, next, message):
        self.previous = previous
        self.next = next
        self.message = message

* Most exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions.

* Many standard modules define their own exceptions to report errors that may occur in functions they define.

* Defining Clean-up Actions:
=============================

* The try statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances.

Eg:

try:
    raise KeyboardInterrupt
finally:
    print('Goodbye, world!')

Goodbye, world!
KeyboardInterrupt
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>

* If a finally clause is present, the finally clause will execute as the last task before the try statement completes. The finally clause runs whether or not the try statement produces an exception. 

* The following points discuss more complex cases when an exception occurs:

* If an exception occurs during execution of the try clause, the exception may be handled by an except clause. If the exception is not handled by an except clause, the exception is re-raised after the finally clause has been executed.

* An exception could occur during execution of an except or else clause. Again, the exception is re-raised after the finally clause has been executed.

* If the try statement reaches a break, continue or return statement, the finally clause will execute just prior to the break, continue or return statement’s execution.

* If a finally clause includes a return statement, the returned value will be the one from the finally clause’s return statement, not the value from the try clause’s return statement.

Eg:

def bool_return():
    try:
        return True
    finally:
        return False

bool_return()

* Predefined Clean-up Actions:
==============================

* Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed.

Eg:

* which tries to open a file and print its contents to the screen.

for line in open("myfile.txt"):
    print(line, end="")

* The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing.
* This is not an issue in simple scripts, but can be a problem for larger applications.
* The with statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly.

Eg:

with open("myfile.txt") as f:
    for line in f:
        print(line, end="")


* After the statement is executed, the file f is always closed, even if a problem was encountered while processing the lines.








